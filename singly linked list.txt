package com.company;
class Main{
    static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public Node head=null;
    public Node tail=null;
    int size;
    public void add(int data){
        Node newNode=new Node(data);
        if(head==null){
            head=newNode;
        }
        else {
            tail.next=newNode;
        }
        tail=newNode;
        size++;
    }
    public void insert_at_first(int data){
        Node newNode=new Node(data);
        newNode.next=head;
        head=newNode;
        size++;
    }
    public void insert_at_end(int data){
        Node newNode=new Node(data);
        if(head==null){
            head=newNode;
        }
        else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }
    public void insert_at_middle(int data){
        Node newNode=new Node(data);
        int count=(size%2==0)?(size/2):((size+1)/2);
        Node temp=head;
        Node current=null;
        for (int i=0;i<count;i++){
            current=temp;
            temp=temp.next;
        }
        if (current != null) {
            current.next=newNode;
        }
        newNode.next=temp;
        size++;
    }
    public void insert_at_position(int data,int position){
        Node newNode=new Node(data);
        Node temp=head;
        Node current=null;
        for (int i=1;i<position;i++){
            current=temp;
            temp=temp.next;
        }
        if (current!=null){
            current.next=newNode;
        }
        newNode.next=temp;
        size++;
    }
    public void delete_first(){
        Node temp=head;
        head=head.next;
        temp.next=null;
        size--;
    }
    public void delete_last(){
        Node temp=head;
        while (temp.next.next!=null){
            temp=temp.next;
        }
        temp.next=null;
        size--;
    }
    public void delete_at_position(int position){
        Node temp=head;
        Node current=null;
        for (int i=1;i<position;i++){
            current=temp;
            temp=temp.next;
        }
        if(current!=null) {
            current.next = current.next.next;
        }
        size--;
    }
    public void delete_by_value(int key){
        Node temp=head;
        Node current =null;
        if(temp!=null&&temp.data==key){
            head=temp.next;
        }
        while (temp!=null&&temp.data!=key){
            current=temp;
            temp=temp.next;
        }
        if(current!=null&&temp!=null) {
            current.next = temp.next;
        }
        size--;
    }
    public void search(int key){
        Node temp=head;
        int count=1;
        while (temp!=null){
            if(temp.data==key){
                System.out.println(key+" is present at node "+count);
            }
            temp=temp.next;
            count++;
        }
    }
    public void update_by_value(int key,int data){
        Node temp=head;
        while (temp!=null){
            if(temp.data==key){
                temp.data=data;
            }
            temp=temp.next;
        }
    }
    public void update_by_node(int key,int data){
        Node temp=head;
        Node current=null;
        for (int i=0;i<key;i++){
            current=temp;
            temp=temp.next;
        }
        if(current!=null) {
            current.data = data;
        }
    }
    public void reverse(){
        Node current=head;
        Node previous=null;
        Node next;
        while (current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=next;
        }
        head=previous;
    }
    public void display(){
        Node current =head;
        while (current!=null){
            System.out.print(current.data+" ");
            current=current.next;
        }
    }
    public static void main(String[] args){
        Main sl=new Main();
        sl.add(1);
        sl.add(2);
        sl.add(3);
        sl.add(4);
        sl.insert_at_first(0);
        sl.insert_at_end(5);
        sl.insert_at_middle(8);
        sl.insert_at_position(10,3);
        sl.insert_at_middle(88);
        sl.delete_first();
        sl.delete_last();
        sl.delete_at_position(4);
        sl.delete_by_value(2);
        sl.search(1);
        sl.update_by_value(8,5);
        sl.update_by_node(4,11);
        sl.reverse();
        sl.display();
    }
}